Borrowing in Rust
- one time one mutable refrance pass
- multiple immutable refrance pass for one time




Vector
- push
- remove
- direct declaration with values    


HashMap
- insert
- get answer given in form of Option enum Some or None
- remove
- clear


Iterators   
- iter() -> immutable refrance to the vector    
- iter_mut() -> mutable refrance to the vector
- iter.next() -> Option enum Some or None 
- into_iter() -> takes ownership of the vector
- sum() -> sum of all the elements in the vector
- map() -> takes a closure and creates a new iterator returning the result of the closure for each element value 
- filter() -> takes a closure and creates a new iterator returning only the elements for which the closure returns true

- iter().collect() -> collect the iterator into a collection



String
- push_str
- replace_reange(start_index,end_index,replace_string_value)
- str.chars() -> returns the iterator of the characters of the string
- str.len() -> returns the length of the string



Slice
- Slice is kind of refrance to the string does not take ownership of the string


Trait
- Trait is a way to define a set of methods that a type must have to implement the trait
- Default trait is used to provide default implementation of the methods in the trait
- implement the trait for a type using impl keyword 
- funcation create parameter with trait type and then pass the object of the type which implements the trait
- multiple traits can be implemented for a type 
- generic type can be used in the trait definition 
- generic type can be used in the multiple traits 


Closure
- Closure is a way to define a function in a short form 
- Closure can capture the variables from the scope in which it is defined 
- Closure can be passed as a parameter to a function
- Closure can be returned from a function
- Closure can be stored in a variable
- Closure can be used as a parameter to a function
- Closure can be used as a return type of a function
- Closure Anymous function that can be stored in a variable or passed as a parameter to a function

Moving Captured Values Out of Closures and the Fn Traits
3 Type FnOnce, FnMut, Fn
- FnOnce trait is used to capture the variables from the scope in which it is defined and move them into the closure , because it can only be called once.
- FnMut  don’t move captured values out of their body , but that might mutate the captured values. These closures can be called more than once.
- Fn don’t move captured values out of their body and that don’t mutate captured values, in cases such as calling a closure multiple times concurrently.
